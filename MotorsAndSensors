#include <mbed.h>
#include <iostream> //need to reference the abs function??
using namespace rtos;
using namespace::mbed;

void setup() {
  Serial.begin(9600);
}

//Pins for motor function
PwmOut MotorAPWM(P0_27);
DigitalOut MotorADir(P0_4);
PwmOut MotorBPWM(P1_2);
DigitalOut MotorBDir(P0_5);

//Pins for US function
DigitalInOut trig(P1_14);//puts it on sensor 2 position on the board
DigitalInOut echo(P1_14);



//US sensor setup
Timer timer;
int distance = 0;
int correction = 0;

//Encoder inputs and counts
InterruptIn EncA(P1_11);
long int ShaftRevA = 0;
long int EncCountA = 0;
//long ints used to stop numerical overlow as large values

InterruptIn EncB(P1_12);
long int ShaftRevB = 0;
long int EncCountB = 0;

//Encoder setup
Timer speedTimer;
float DistanceL = 0.0;
float DistanceR = 0.0;
float SpeedA = 0.0;
float SpeedB = 0.0;


//Encoder function
//counts the number of encoder counts 

void countPulseA(){
   if(MotorADir == 0)//if going forward
     EncCountA++;//count up
   else
     EncCountA--;//count down

}


void countPulseB(){
   if(MotorBDir == 0)//if going forward
     EncCountB+=1;//count up
   else
     EncCountB-=1;//count down
  //FIXING ENCODER  hardware error by doubling count

}

void measureDistanceLeft() {
  DistanceL = 0.0;
  //EncCountA = 0;
  speedTimer.reset();
  speedTimer.start();
  while (abs(EncCountA) < 660){
    EncCountA++;
  }
  speedTimer.stop();
  DistanceL = (48*3.14*EncCountA)/660;
  //diameter by encoder count
  Serial.println("Distance by left motor");
  Serial.println(DistanceL);
}

void measureDistanceRight() {
  DistanceR = 0.0;
  //EncCountB = 0;
  speedTimer.reset();
  speedTimer.start();
  while (abs(EncCountB) < 660) {
    EncCountB++;
  }
  speedTimer.stop();
  DistanceR = (48*3.14*EncCountB)/660;
  Serial.println("Distance by right motor");
  Serial.println(DistanceR);
}

void measureSpeed() {
  float diffDistance = abs(DistanceR - DistanceL);
  float newDistanceL = DistanceL+(diffDistance/2);
  float newDistanceR = DistanceR-(diffDistance/2);//error correction, make both values in the middle as they were quite far out
  //Serial.println(diffDistance);
  //Serial.println(newDistanceL);
  //Serial.println(newDistanceR);
  
  float avgDistance = (abs(newDistanceL)+abs(newDistanceR))/2;
  //Serial.println(avgDistance);
  float elapsedTime = speedTimer.read_us();
  Serial.println("elapsed time is");
  Serial.println(elapsedTime);
  float speed = avgDistance/elapsedTime;
  Serial.println("Average speed is: ");
  Serial.println(speed);
  DistanceL = 0.0;//reset distance
  DistanceR = 0.0;
}

//Motor setup and function
class Motor {
  public:
    int moveMotor(int motor, int direction, float speed);
    int brakeMotor(int motor);
    int turnLeft();
    int turnRight();
    int forward(int dist);
    int reverse(int dist);
};

int Motor::moveMotor(int motor, int direction, float pwm) {

  if (motor == 0) {
      //Serial.println("Motor A selected");
      Serial.println();
      MotorAPWM.period(0.001f); // Sets frequency to 100kHz 1ms
      MotorADir.write(direction);//set direction forward
      MotorAPWM.write(pwm); 
  }
  else if (motor == 1) {
      //Serial.println("Motor B selected");
      Serial.println();
      MotorBPWM.period(0.001f); // Sets frequency to 100kHz
      MotorBDir.write(direction);//set direction
      MotorBPWM.write(pwm);
  }
  else {
    Serial.println("re-enter motor number");
  }
}

int Motor::brakeMotor(int motor){

  if (motor == 0) {
    //Serial.println("Motor A braking");
    Serial.println();
    MotorAPWM.write(0);//pwm input set low
    //set high z as per datasheet
    MotorADir.write(0);
    MotorAPWM.write(0);
  }
  
  if (motor ==1 ) {
    //Serial.println("Motor B braking");
    Serial.println();
    MotorBPWM.write(1);//pwm input set low
    //set high z
    MotorBDir.write(0);
    MotorBPWM.write(0);
  }
}

int Motor::turnLeft(){
  moveMotor(1, 1, 0.99f);
  delay(930);
  brakeMotor(1);
}

int Motor::turnRight(){
  moveMotor(0, 0, 0.99f);
  delay(930);
  brakeMotor(0);
}

int Motor::forward(int dist){
  moveMotor(0, 0, 0.8f);
  moveMotor(1, 1, 0.8f);
  delay(dist);
  brakeMotor(0);
  brakeMotor(1);
}

int Motor::reverse(int dist){
  moveMotor(0, 1, 0.8f);//a clockwise
  moveMotor(1, 0, 0.8f);//b counterclockwise
  delay(dist);
  brakeMotor(0);
  brakeMotor(1);
}

//Ultrasonic sensor function
void UsSensor(){
  // trigger the ultrasonic sensor to send a pulse for 10uS
  trig.output();// sets pin to output
  trig = 1;
  timer.reset();
  wait_us(10);
  trig = 0;

  // wait for a rising edge
  trig.input();// sets pin to input
  echo.input();// sets echo to input
  while (echo==0) {};
  //echo high, starting timer to measure time till we get a reading
  timer.start();
  while (echo==1) {};
  timer.stop();
  distance = (timer.read_us()/58.0);  //divide by 58 as per datasheet for conversion to cm
  Serial.print("Distance to obstacle forward in cm: ");
  Serial.print(distance, DEC);//print distance in decimal
  Serial.println();
  delay(100); //wait so any echoes return before sending another pulse as per datasheet reccomendation
}
//IR sensor setup and function
class IRSensor {
  public:
    int chooseIRSensor(int sensorNumber);
    void measure();
};

int IRSensor::chooseIRSensor(int sensorNumber) {
  char mux_cmd = 0;
  if (sensorNumber == 0) {
    mux_cmd = 0x01; // defines mux_cmd as command to select a channel on the I2C mux. Addresss in hex as 1, in binary it is 0001
    Serial.println("Distance to left in cm: ");

  }
  else /*(sensorNumber == 1)*/ {
    mux_cmd = 0x02;  //this selects the other IR sensor when uncommented
    Serial.println("Distance to right in cm: ");
  }
  /*else {
    Serial.println("Input either sensor 1 or 0");
  }*/
  return mux_cmd;//return so it is accessable outside the function  
}

void IRSensor::measure() {
  I2C i2c(P0_31, P0_2);              // initializes i2c, uses P0_31 as SDA (for data) and P0_2 as SCL (clock)
  const char mux_cmd = chooseIRSensor(0);// defines mux_cmd as command to select a channel on the I2C mux
  const char mux_addr = 0xEE;        // select bus 0 on mux chip
  i2c.write(mux_addr, &mux_cmd, 1);  // writes the mux_cmd to the addresss mux_addr
  //the sensor is now on bus 0, address 0x80

  char distances[3];    //array distances with 3 values
  distances[0] = 0x5E;  //high distance
  distances[1] = 0x5F;  //low distance
  distances[2] = 0x00;
  i2c.write(0x80, distances, 1);  // write register addresss to read from
  wait_us(500000);                // wait for sensor response
  i2c.read(0x80, distances, 3);   //Read distance high

  //Serial.print("Distance in cm: ");
  Serial.print((distances[0]*16.0+distances[1])/16.0/4);//distance calculation from the datasheet
  int distance  = (distances[0]*16.0+distances[1])/16.0/4 ;
  Serial.println();
  delay(100);
}

void loop() {
  Motor motor;
  EncA.rise(&countPulseA);//counts pulses, points to the interrupt callback, & gives the address
  EncB.rise(&countPulseB);
  motor.forward(1500);

  measureDistanceLeft();
  measureDistanceRight();
  Serial.println("Encoder A count:");
  Serial.println(EncCountA);
  Serial.println("Encoder B count:");
  Serial.println(EncCountB);
  measureSpeed();
  EncCountB = 0;
  EncCountA = 0;
  delay(1000);
}
